;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; step2: left.stm2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; file: pos_n_1.smt
; generated by a call to `klee_dump_expr(.., pos_n)`
(declare-fun pos () (Array (_ BitVec 32) (_ BitVec 8) ) )
; dumped expression
(define-fun |pos_n_1| () (_ BitVec 32) (concat  (select  pos (_ bv3 32) ) (concat  (select  pos (_ bv2 32) ) (concat  (select  pos (_ bv1 32) ) (select  pos (_ bv0 32) ) ) ) ))
; path condition under which dumped expression is valid (use in ITE)
(define-fun |path_cond_pos_n_1| () Bool (bvslt  (concat  (select  pos (_ bv3 32) ) (concat  (select  pos (_ bv2 32) ) (concat  (select  pos (_ bv1 32) ) (select  pos (_ bv0 32) ) ) ) ) (_ bv4294967197 32) ))


; file pos_n_2.smt
; generated by a call to `klee_dump_expr(.., pos_n)`
; dumped expression
(define-fun |pos_n_2| () (_ BitVec 32) (bvadd  (_ bv4294967295 32) (concat  (select  pos (_ bv3 32) ) (concat  (select  pos (_ bv2 32) ) (concat  (select  pos (_ bv1 32) ) (select  pos (_ bv0 32) ) ) ) ) ))
; path condition under which dumped expression is valid (use in ITE)
(define-fun |path_cond_pos_n_2| () Bool (=  false (bvslt  (concat  (select  pos (_ bv3 32) ) (concat  (select  pos (_ bv2 32) ) (concat  (select  pos (_ bv1 32) ) (select  pos (_ bv0 32) ) ) ) ) (_ bv4294967197 32) ) ))


; file: success_n_1.smt
; generated by a call to `klee_dump_expr(.., success_n)`
; dumped expression
(define-fun |success_n_1| () (_ BitVec 32) (_ bv0 32))
; path condition under which dumped expression is valid (use in ITE)
(define-fun |path_cond_success_n_1| () Bool (bvslt  (concat  (select  pos (_ bv3 32) ) (concat  (select  pos (_ bv2 32) ) (concat  (select  pos (_ bv1 32) ) (select  pos (_ bv0 32) ) ) ) ) (_ bv4294967197 32) ))


; file: success_n_2.smt
; generated by a call to `klee_dump_expr(.., success_n)`
; dumped expression
(define-fun |success_n_2| () (_ BitVec 32) (_ bv1 32))
; path condition under which dumped expression is valid (use in ITE)
(define-fun |path_cond_success_n_2| () Bool (=  false (bvslt  (concat  (select  pos (_ bv3 32) ) (concat  (select  pos (_ bv2 32) ) (concat  (select  pos (_ bv1 32) ) (select  pos (_ bv0 32) ) ) ) ) (_ bv4294967197 32) ) ))

; pos_n after executing left()
(define-fun |pos_n| () (_ BitVec 32) (ite |path_cond_pos_n_1| |pos_n_1| |pos_n_2|))

; success_n after executing left()
(define-fun |success_n| () (_ BitVec 32) (ite |path_cond_success_n_1| |success_n_1| |success_n_2|))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; step4: left.smt2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(declare-fun initial_4_pos () (_ BitVec 32))

; from step3: left_pos.smt2
(define-fun |uclid_pos_n| () (_ BitVec 32)
        (ite (bvsle initial_4_pos #xffffff9c)
             initial_4_pos
             (bvadd #xffffffff initial_4_pos)))

; from step3: left_success.smt2
(define-fun |uclid_success_n| () Bool (not (bvsle initial_4_pos #xffffff9c)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; equivalence
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; convert data types
(define-fun pos_word () (_ BitVec 32)
	(concat  (select  pos (_ bv3 32) ) (concat  (select  pos (_ bv2 32) ) (concat  (select  pos (_ bv1 32) ) (select  pos (_ bv0 32) ) ) ) )
)

(define-fun success_n_bool () Bool (not (= success_n (_ bv0 32))))

; assume equivalent initial state
(assert (= initial_4_pos pos_word))

; try to find values for which the result is different
(assert (not (and
	(= |uclid_pos_n| |pos_n|)
    (= |uclid_success_n| |success_n_bool|))))
(check-sat)
